// Generated by CoffeeScript 1.8.0
(function() {
  var ChainedWebApps, HttpTunnelReq, HttpTunnelServer, WebSocketServer, WsIdStream, bindStream, http, log, net, parseAddress, url, wst_server,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  WebSocketServer = require('websocket').server;

  http = require('http');

  url = require("url");

  net = require("net");

  WsIdStream = require("./WsIdStream");

  log = require("lawg");

  HttpTunnelServer = require("./httptunnel/Server");

  HttpTunnelReq = require("./httptunnel/ConnRequest");

  ChainedWebApps = require("./ChainedWebApps");

  bindStream = require("./bindStream");

  parseAddress = require('./utils').parseAddress;

  module.exports = wst_server = (function() {
    wst_server.prototype.counter = 0;

    function wst_server(webapp) {
      this.close = __bind(this.close, this);
      this.authenticate = __bind(this.authenticate, this);
      var apps;
      this.httpServer = http.createServer();
      this.wsServer = new WebSocketServer({
        httpServer: this.httpServer,
        autoAcceptConnections: false
      });
      apps = new ChainedWebApps();
      this.tunnServer = new HttpTunnelServer(apps);
      if (webapp) {
        apps.setDefaultApp(webapp);
      }
      apps.bindToHttpServer(this.httpServer);
    }

    wst_server.prototype.authenticate = function(request) {};

    wst_server.prototype.close = function() {
      this.httpServer.close();
      return this.wsServer.shutDown();
    };

    wst_server.prototype.start = function(localAddr, cb) {
      var host, port, _ref;
      _ref = parseAddress(localAddr), host = _ref.host, port = _ref.port;
      return this.httpServer.listen(port, host, (function(_this) {
        return function(err) {
          if (cb) {
            cb(err);
          }
          return _this.wsServer.on('request', function(request) {
            var authResult, httpRequest, tcpServer, tunnelPort, wsConn;
            httpRequest = request.httpRequest;
            authResult = _this.authenticate(httpRequest);
            if (authResult) {
              log("websocket connection failed. Bad authentication");
              request.reject(authResult.httpStatus, authResult.reason);
              return;
            }
            wsConn = request.accept('tunnel-protocol', request.origin);
            tunnelPort = url.parse(httpRequest.url, true).query.port;
            tcpServer = net.createServer();
            tcpServer.listen(tunnelPort);
            tcpServer.on("connection", function(tcpConn) {
              var wsStream;
              wsStream = new WsIdStream(wsConn, _this.counter++);
              return bindStream(tcpConn, wsStream);
            });
            wsConn.on('close', function() {
              log("websocket closed");
              return tcpServer.close(function() {
                return log("tcpServer closed");
              });
            });
            return log("opened a new tunnel entrance at " + tunnelPort);
          });
        };
      })(this));
    };

    return wst_server;

  })();

}).call(this);

//# sourceMappingURL=WstReverseServer.js.map
